// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  policy: (where?: PolicyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  customer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  customers: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Customer>;
  customersConnection: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomerConnectionPromise;
  policy: (where: PolicyWhereUniqueInput) => PolicyPromise;
  policies: (
    args?: {
      where?: PolicyWhereInput;
      orderBy?: PolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Policy>;
  policiesConnection: (
    args?: {
      where?: PolicyWhereInput;
      orderBy?: PolicyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PolicyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (
    args: { data: CustomerUpdateInput; where: CustomerWhereUniqueInput }
  ) => CustomerPromise;
  updateManyCustomers: (
    args: { data: CustomerUpdateManyMutationInput; where?: CustomerWhereInput }
  ) => BatchPayloadPromise;
  upsertCustomer: (
    args: {
      where: CustomerWhereUniqueInput;
      create: CustomerCreateInput;
      update: CustomerUpdateInput;
    }
  ) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createPolicy: (data: PolicyCreateInput) => PolicyPromise;
  updatePolicy: (
    args: { data: PolicyUpdateInput; where: PolicyWhereUniqueInput }
  ) => PolicyPromise;
  updateManyPolicies: (
    args: { data: PolicyUpdateManyMutationInput; where?: PolicyWhereInput }
  ) => BatchPayloadPromise;
  upsertPolicy: (
    args: {
      where: PolicyWhereUniqueInput;
      create: PolicyCreateInput;
      update: PolicyUpdateInput;
    }
  ) => PolicyPromise;
  deletePolicy: (where: PolicyWhereUniqueInput) => PolicyPromise;
  deleteManyPolicies: (where?: PolicyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  policy: (
    where?: PolicySubscriptionWhereInput
  ) => PolicySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "company_name_ASC"
  | "company_name_DESC"
  | "company_address_ASC"
  | "company_address_DESC"
  | "company_postcode_ASC"
  | "company_postcode_DESC"
  | "company_number_ASC"
  | "company_number_DESC"
  | "company_house_match_ASC"
  | "company_house_match_DESC"
  | "company_house_description_ASC"
  | "company_house_description_DESC"
  | "business_description_ASC"
  | "business_description_DESC"
  | "customer_name_ASC"
  | "customer_name_DESC"
  | "customer_address_ASC"
  | "customer_address_DESC"
  | "customer_postcode_ASC"
  | "customer_postcode_DESC";

export type PolicyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "policy_number_ASC"
  | "policy_number_DESC"
  | "account_exec_ASC"
  | "account_exec_DESC"
  | "account_handler_ASC"
  | "account_handler_DESC"
  | "long_term_agreement_ASC"
  | "long_term_agreement_DESC"
  | "premium_pennies_ASC"
  | "premium_pennies_DESC"
  | "renewal_date_ASC"
  | "renewal_date_DESC"
  | "start_date_ASC"
  | "start_date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CustomerUpdateDataInput {
  company_name?: String;
  company_address?: String;
  company_postcode?: String;
  company_number?: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description?: String;
  customer_name?: String;
  customer_address?: String;
  customer_postcode?: String;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  customer_name?: String;
}>;

export interface CustomerUpdateOneRequiredInput {
  create?: CustomerCreateInput;
  update?: CustomerUpdateDataInput;
  upsert?: CustomerUpsertNestedInput;
  connect?: CustomerWhereUniqueInput;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomerWhereInput;
  AND?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  OR?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  NOT?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
}

export interface PolicyUpdateInput {
  customer?: CustomerUpdateOneRequiredInput;
  policy_number?: String;
  account_exec?: String;
  account_handler?: String;
  long_term_agreement?: Boolean;
  premium_pennies?: Int;
  renewal_date?: DateTimeInput;
  start_date?: DateTimeInput;
}

export interface UserUpdateInput {
  name?: String;
}

export interface CustomerCreateOneInput {
  create?: CustomerCreateInput;
  connect?: CustomerWhereUniqueInput;
}

export interface PolicyUpdateManyMutationInput {
  policy_number?: String;
  account_exec?: String;
  account_handler?: String;
  long_term_agreement?: Boolean;
  premium_pennies?: Int;
  renewal_date?: DateTimeInput;
  start_date?: DateTimeInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PolicyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PolicyCreateInput {
  customer: CustomerCreateOneInput;
  policy_number: String;
  account_exec: String;
  account_handler: String;
  long_term_agreement: Boolean;
  premium_pennies: Int;
  renewal_date: DateTimeInput;
  start_date: DateTimeInput;
}

export interface PolicyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  customer?: CustomerWhereInput;
  policy_number?: String;
  policy_number_not?: String;
  policy_number_in?: String[] | String;
  policy_number_not_in?: String[] | String;
  policy_number_lt?: String;
  policy_number_lte?: String;
  policy_number_gt?: String;
  policy_number_gte?: String;
  policy_number_contains?: String;
  policy_number_not_contains?: String;
  policy_number_starts_with?: String;
  policy_number_not_starts_with?: String;
  policy_number_ends_with?: String;
  policy_number_not_ends_with?: String;
  account_exec?: String;
  account_exec_not?: String;
  account_exec_in?: String[] | String;
  account_exec_not_in?: String[] | String;
  account_exec_lt?: String;
  account_exec_lte?: String;
  account_exec_gt?: String;
  account_exec_gte?: String;
  account_exec_contains?: String;
  account_exec_not_contains?: String;
  account_exec_starts_with?: String;
  account_exec_not_starts_with?: String;
  account_exec_ends_with?: String;
  account_exec_not_ends_with?: String;
  account_handler?: String;
  account_handler_not?: String;
  account_handler_in?: String[] | String;
  account_handler_not_in?: String[] | String;
  account_handler_lt?: String;
  account_handler_lte?: String;
  account_handler_gt?: String;
  account_handler_gte?: String;
  account_handler_contains?: String;
  account_handler_not_contains?: String;
  account_handler_starts_with?: String;
  account_handler_not_starts_with?: String;
  account_handler_ends_with?: String;
  account_handler_not_ends_with?: String;
  long_term_agreement?: Boolean;
  long_term_agreement_not?: Boolean;
  premium_pennies?: Int;
  premium_pennies_not?: Int;
  premium_pennies_in?: Int[] | Int;
  premium_pennies_not_in?: Int[] | Int;
  premium_pennies_lt?: Int;
  premium_pennies_lte?: Int;
  premium_pennies_gt?: Int;
  premium_pennies_gte?: Int;
  renewal_date?: DateTimeInput;
  renewal_date_not?: DateTimeInput;
  renewal_date_in?: DateTimeInput[] | DateTimeInput;
  renewal_date_not_in?: DateTimeInput[] | DateTimeInput;
  renewal_date_lt?: DateTimeInput;
  renewal_date_lte?: DateTimeInput;
  renewal_date_gt?: DateTimeInput;
  renewal_date_gte?: DateTimeInput;
  start_date?: DateTimeInput;
  start_date_not?: DateTimeInput;
  start_date_in?: DateTimeInput[] | DateTimeInput;
  start_date_not_in?: DateTimeInput[] | DateTimeInput;
  start_date_lt?: DateTimeInput;
  start_date_lte?: DateTimeInput;
  start_date_gt?: DateTimeInput;
  start_date_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PolicyWhereInput[] | PolicyWhereInput;
  OR?: PolicyWhereInput[] | PolicyWhereInput;
  NOT?: PolicyWhereInput[] | PolicyWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface CustomerCreateInput {
  company_name: String;
  company_address: String;
  company_postcode: String;
  company_number: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description: String;
  customer_name: String;
  customer_address: String;
  customer_postcode: String;
}

export interface CustomerUpdateInput {
  company_name?: String;
  company_address?: String;
  company_postcode?: String;
  company_number?: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description?: String;
  customer_name?: String;
  customer_address?: String;
  customer_postcode?: String;
}

export interface CustomerUpdateManyMutationInput {
  company_name?: String;
  company_address?: String;
  company_postcode?: String;
  company_number?: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description?: String;
  customer_name?: String;
  customer_address?: String;
  customer_postcode?: String;
}

export interface PolicySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PolicyWhereInput;
  AND?: PolicySubscriptionWhereInput[] | PolicySubscriptionWhereInput;
  OR?: PolicySubscriptionWhereInput[] | PolicySubscriptionWhereInput;
  NOT?: PolicySubscriptionWhereInput[] | PolicySubscriptionWhereInput;
}

export interface UserCreateInput {
  name: String;
}

export interface CustomerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  company_name?: String;
  company_name_not?: String;
  company_name_in?: String[] | String;
  company_name_not_in?: String[] | String;
  company_name_lt?: String;
  company_name_lte?: String;
  company_name_gt?: String;
  company_name_gte?: String;
  company_name_contains?: String;
  company_name_not_contains?: String;
  company_name_starts_with?: String;
  company_name_not_starts_with?: String;
  company_name_ends_with?: String;
  company_name_not_ends_with?: String;
  company_address?: String;
  company_address_not?: String;
  company_address_in?: String[] | String;
  company_address_not_in?: String[] | String;
  company_address_lt?: String;
  company_address_lte?: String;
  company_address_gt?: String;
  company_address_gte?: String;
  company_address_contains?: String;
  company_address_not_contains?: String;
  company_address_starts_with?: String;
  company_address_not_starts_with?: String;
  company_address_ends_with?: String;
  company_address_not_ends_with?: String;
  company_postcode?: String;
  company_postcode_not?: String;
  company_postcode_in?: String[] | String;
  company_postcode_not_in?: String[] | String;
  company_postcode_lt?: String;
  company_postcode_lte?: String;
  company_postcode_gt?: String;
  company_postcode_gte?: String;
  company_postcode_contains?: String;
  company_postcode_not_contains?: String;
  company_postcode_starts_with?: String;
  company_postcode_not_starts_with?: String;
  company_postcode_ends_with?: String;
  company_postcode_not_ends_with?: String;
  company_number?: String;
  company_number_not?: String;
  company_number_in?: String[] | String;
  company_number_not_in?: String[] | String;
  company_number_lt?: String;
  company_number_lte?: String;
  company_number_gt?: String;
  company_number_gte?: String;
  company_number_contains?: String;
  company_number_not_contains?: String;
  company_number_starts_with?: String;
  company_number_not_starts_with?: String;
  company_number_ends_with?: String;
  company_number_not_ends_with?: String;
  company_house_match?: String;
  company_house_match_not?: String;
  company_house_match_in?: String[] | String;
  company_house_match_not_in?: String[] | String;
  company_house_match_lt?: String;
  company_house_match_lte?: String;
  company_house_match_gt?: String;
  company_house_match_gte?: String;
  company_house_match_contains?: String;
  company_house_match_not_contains?: String;
  company_house_match_starts_with?: String;
  company_house_match_not_starts_with?: String;
  company_house_match_ends_with?: String;
  company_house_match_not_ends_with?: String;
  company_house_description?: String;
  company_house_description_not?: String;
  company_house_description_in?: String[] | String;
  company_house_description_not_in?: String[] | String;
  company_house_description_lt?: String;
  company_house_description_lte?: String;
  company_house_description_gt?: String;
  company_house_description_gte?: String;
  company_house_description_contains?: String;
  company_house_description_not_contains?: String;
  company_house_description_starts_with?: String;
  company_house_description_not_starts_with?: String;
  company_house_description_ends_with?: String;
  company_house_description_not_ends_with?: String;
  business_description?: String;
  business_description_not?: String;
  business_description_in?: String[] | String;
  business_description_not_in?: String[] | String;
  business_description_lt?: String;
  business_description_lte?: String;
  business_description_gt?: String;
  business_description_gte?: String;
  business_description_contains?: String;
  business_description_not_contains?: String;
  business_description_starts_with?: String;
  business_description_not_starts_with?: String;
  business_description_ends_with?: String;
  business_description_not_ends_with?: String;
  customer_name?: String;
  customer_name_not?: String;
  customer_name_in?: String[] | String;
  customer_name_not_in?: String[] | String;
  customer_name_lt?: String;
  customer_name_lte?: String;
  customer_name_gt?: String;
  customer_name_gte?: String;
  customer_name_contains?: String;
  customer_name_not_contains?: String;
  customer_name_starts_with?: String;
  customer_name_not_starts_with?: String;
  customer_name_ends_with?: String;
  customer_name_not_ends_with?: String;
  customer_address?: String;
  customer_address_not?: String;
  customer_address_in?: String[] | String;
  customer_address_not_in?: String[] | String;
  customer_address_lt?: String;
  customer_address_lte?: String;
  customer_address_gt?: String;
  customer_address_gte?: String;
  customer_address_contains?: String;
  customer_address_not_contains?: String;
  customer_address_starts_with?: String;
  customer_address_not_starts_with?: String;
  customer_address_ends_with?: String;
  customer_address_not_ends_with?: String;
  customer_postcode?: String;
  customer_postcode_not?: String;
  customer_postcode_in?: String[] | String;
  customer_postcode_not_in?: String[] | String;
  customer_postcode_lt?: String;
  customer_postcode_lte?: String;
  customer_postcode_gt?: String;
  customer_postcode_gte?: String;
  customer_postcode_contains?: String;
  customer_postcode_not_contains?: String;
  customer_postcode_starts_with?: String;
  customer_postcode_not_starts_with?: String;
  customer_postcode_ends_with?: String;
  customer_postcode_not_ends_with?: String;
  AND?: CustomerWhereInput[] | CustomerWhereInput;
  OR?: CustomerWhereInput[] | CustomerWhereInput;
  NOT?: CustomerWhereInput[] | CustomerWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Customer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  company_name: String;
  company_address: String;
  company_postcode: String;
  company_number: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description: String;
  customer_name: String;
  customer_address: String;
  customer_postcode: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  company_name: () => Promise<String>;
  company_address: () => Promise<String>;
  company_postcode: () => Promise<String>;
  company_number: () => Promise<String>;
  company_house_match: () => Promise<String>;
  company_house_description: () => Promise<String>;
  business_description: () => Promise<String>;
  customer_name: () => Promise<String>;
  customer_address: () => Promise<String>;
  customer_postcode: () => Promise<String>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  company_name: () => Promise<AsyncIterator<String>>;
  company_address: () => Promise<AsyncIterator<String>>;
  company_postcode: () => Promise<AsyncIterator<String>>;
  company_number: () => Promise<AsyncIterator<String>>;
  company_house_match: () => Promise<AsyncIterator<String>>;
  company_house_description: () => Promise<AsyncIterator<String>>;
  business_description: () => Promise<AsyncIterator<String>>;
  customer_name: () => Promise<AsyncIterator<String>>;
  customer_address: () => Promise<AsyncIterator<String>>;
  customer_postcode: () => Promise<AsyncIterator<String>>;
}

export interface CustomerEdge {
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CustomerConnection {}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface PolicyEdge {
  cursor: String;
}

export interface PolicyEdgePromise extends Promise<PolicyEdge>, Fragmentable {
  node: <T = PolicyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PolicyEdgeSubscription
  extends Promise<AsyncIterator<PolicyEdge>>,
    Fragmentable {
  node: <T = PolicySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Policy {
  id: ID_Output;
  policy_number: String;
  account_exec: String;
  account_handler: String;
  long_term_agreement: Boolean;
  premium_pennies: Int;
  renewal_date: DateTimeOutput;
  start_date: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PolicyPromise extends Promise<Policy>, Fragmentable {
  id: () => Promise<ID_Output>;
  customer: <T = CustomerPromise>() => T;
  policy_number: () => Promise<String>;
  account_exec: () => Promise<String>;
  account_handler: () => Promise<String>;
  long_term_agreement: () => Promise<Boolean>;
  premium_pennies: () => Promise<Int>;
  renewal_date: () => Promise<DateTimeOutput>;
  start_date: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PolicySubscription
  extends Promise<AsyncIterator<Policy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customer: <T = CustomerSubscription>() => T;
  policy_number: () => Promise<AsyncIterator<String>>;
  account_exec: () => Promise<AsyncIterator<String>>;
  account_handler: () => Promise<AsyncIterator<String>>;
  long_term_agreement: () => Promise<AsyncIterator<Boolean>>;
  premium_pennies: () => Promise<AsyncIterator<Int>>;
  renewal_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  company_name: String;
  company_address: String;
  company_postcode: String;
  company_number: String;
  company_house_match?: String;
  company_house_description?: String;
  business_description: String;
  customer_name: String;
  customer_address: String;
  customer_postcode: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  company_name: () => Promise<String>;
  company_address: () => Promise<String>;
  company_postcode: () => Promise<String>;
  company_number: () => Promise<String>;
  company_house_match: () => Promise<String>;
  company_house_description: () => Promise<String>;
  business_description: () => Promise<String>;
  customer_name: () => Promise<String>;
  customer_address: () => Promise<String>;
  customer_postcode: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  company_name: () => Promise<AsyncIterator<String>>;
  company_address: () => Promise<AsyncIterator<String>>;
  company_postcode: () => Promise<AsyncIterator<String>>;
  company_number: () => Promise<AsyncIterator<String>>;
  company_house_match: () => Promise<AsyncIterator<String>>;
  company_house_description: () => Promise<AsyncIterator<String>>;
  business_description: () => Promise<AsyncIterator<String>>;
  customer_name: () => Promise<AsyncIterator<String>>;
  customer_address: () => Promise<AsyncIterator<String>>;
  customer_postcode: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface PolicySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PolicySubscriptionPayloadPromise
  extends Promise<PolicySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PolicyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PolicyPreviousValuesPromise>() => T;
}

export interface PolicySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PolicySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PolicySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PolicyPreviousValuesSubscription>() => T;
}

export interface PolicyPreviousValues {
  id: ID_Output;
  policy_number: String;
  account_exec: String;
  account_handler: String;
  long_term_agreement: Boolean;
  premium_pennies: Int;
  renewal_date: DateTimeOutput;
  start_date: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PolicyPreviousValuesPromise
  extends Promise<PolicyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  policy_number: () => Promise<String>;
  account_exec: () => Promise<String>;
  account_handler: () => Promise<String>;
  long_term_agreement: () => Promise<Boolean>;
  premium_pennies: () => Promise<Int>;
  renewal_date: () => Promise<DateTimeOutput>;
  start_date: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PolicyPreviousValuesSubscription
  extends Promise<AsyncIterator<PolicyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  policy_number: () => Promise<AsyncIterator<String>>;
  account_exec: () => Promise<AsyncIterator<String>>;
  account_handler: () => Promise<AsyncIterator<String>>;
  long_term_agreement: () => Promise<AsyncIterator<Boolean>>;
  premium_pennies: () => Promise<AsyncIterator<Int>>;
  renewal_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PolicyConnection {}

export interface PolicyConnectionPromise
  extends Promise<PolicyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PolicyEdge>>() => T;
  aggregate: <T = AggregatePolicyPromise>() => T;
}

export interface PolicyConnectionSubscription
  extends Promise<AsyncIterator<PolicyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PolicyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePolicySubscription>() => T;
}

export interface AggregatePolicy {
  count: Int;
}

export interface AggregatePolicyPromise
  extends Promise<AggregatePolicy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePolicySubscription
  extends Promise<AsyncIterator<AggregatePolicy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Policy",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
